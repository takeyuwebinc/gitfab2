# Name of your application. Used to uniquely configure containers.
service: gitfab2

# Name of the container image.
image: xxxxxxxx/gitfab2

# Deploy to these servers.
servers:
  web:
    cmd: bash -c "rm -f tmp/pids/server.pid; bundle exec unicorn_rails -c config/unicorn.rb"
  job:
    cmd: bin/delayed_job run
    logging:
      driver: syslog
      options:
        syslog-address: udp://127.0.0.1:514
        syslog-facility: daemon
        tag: "job"
        syslog-format: rfc5424
  cron:
    cmd:
      bash -c "eval \$(printenv | awk -F= '{print \"export \" \"\\\"\"\$1\"\\\"\"\"=\"\"\\\"\"\$2\"\\\"\" }' >> /etc/environment); cat config/crontab | crontab - && cron -f"
    logging:
      driver: syslog
      options:
        syslog-address: udp://127.0.0.1:514
        syslog-facility: daemon
        tag: "cron"
        syslog-format: rfc5424

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption. 
proxy:
  # Proxy connects to your container on port 80 by default.
  app_port: 3000
  healthcheck:
    path: /up
  forward_headers: true
  response_timeout: 3000
  buffering:
      requests: true
      responses: true
      max_request_body: 100_000_000
      max_response_body: 0
      memory: 1_000_000

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: xxxxxxxx

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  context: .
  dockerfile: docker/Dockerfile.prod
  args:
    WORKDIR: /app

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
env:
  clear:
    TZ: "Asia/Tokyo"
    DB_HOST: gitfab2-db
    DB_USER: root
    TERM: linux
    RAILS_SERVE_STATIC_FILES: "true"
    RAILS_LOG_LEVEL: "debug"
  secret:
    - DB_PASSWORD
    - GITHUB_APP_ID
    - GITHUB_APP_SECRET
    - DEVISE_SECRET_KEY
    - SENTRY_DSN
    - RAILS_MASTER_KEY


# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
#
aliases:
  apps: server exec docker exec kamal-proxy kamal-proxy list

# Use a persistent storage volume.
#
volumes:
  - "/data/uploads:/app/public/uploads"
  - "/data/backup:/app/tmp/backup"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

logging:
  driver: syslog
  options:
    syslog-address: udp://127.0.0.1:514
    syslog-facility: daemon
    tag: "web"
    syslog-format: rfc5424

# Use accessory services (secrets come from .kamal/secrets).
#
accessories:
  db:
    image: mysql:8.0-debian
    cmd: /usr/local/bin/mysqld.sh
    port: "127.0.0.1:3306:3306"
    env:
      clear:
        MYSQL_ROOT_HOST: '%'
      secret:
        - MYSQL_ROOT_PASSWORD
    files:
      - config/mysql/mysqld.sh:/usr/local/bin/mysqld.sh
      - config/mysql/production.cnf:/etc/mysql/my.cnf
      - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
    volumes:
      - "/data/mysql:/var/lib/mysql"
    options:
      log-driver: syslog
      log-opt:
        - syslog-address=udp://127.0.0.1:514
        - syslog-facility=daemon
        - tag=db
        - syslog-format=rfc5424
